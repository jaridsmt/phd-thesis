[{"kind":2,"language":"magma","value":"\n//function that returns the Chayet--Garibaldi algebra of type G2 \n//field : the field of definition\n//O : octonion algebra over field\nfunction CGAlgebraG2(field,O);\n  //malcev product on O\n  function malcev(a,b);\n    return a*b-b*a;\n  end function;\n  //straightforward map.\n  function sym(a,b);\n    return 1/2*(KroneckerProduct(a,b) + KroneckerProduct(b,a));\n  end function;\n  // V is the endomorphism space of operators\n  V := VectorSpace(field,8^2);\n  //This indexing represents a basis of the symmetric square of pure octonions\n  indexing := [];\n  for i in [2..8] do\n    for j in [i..8] do\n      Append(~indexing,[i,j]);\n    end for;\n  end for;\n  //construct a basis for the symmetric operators on the 7-dimensional space of pure octonions\n  basis:=[];\n  for index in indexing do\n    Append(~basis, V ! sym(O.(index[1]),O.(index[2])));\n  end for;\n  W:= RSpaceWithBasis(basis);\n  assert W.1 eq sym(O.2,O.2);\n  assert Dimension(W) eq 28;\n  //Multiplication from [D23], might be adapted to check whether any G2-equivariant product on this space admits a Killing metrized form with \"positive curvature operator\"\n  function mult(a,b,c,d);\n    term1 := InnerProduct(a,b)*sym(c,d) + InnerProduct(c,d)*sym(a,b);\n    term2 :=  InnerProduct(a,c)*sym(b,d) + InnerProduct(b,d)*sym(a,c) +InnerProduct(a,d)*sym(b,c) + InnerProduct(b,c)*sym(a,d);\n    term3 := sym(malcev(a,c),malcev(b,d)) + sym(malcev(a,d),malcev(b,c));\n    return 1/6*term1 + 1/6*term2 -1/48*term3;\n  end function;\n  // compute structure_constants\n  structure_constants := [];\n  for index1 in indexing do\n    row := [];\n    for index2 in indexing do\n      Append(~row, Coordinates(W, W ! mult(O.(index1[1]), O.(index1[2]), O.(index2[1]), O.(index2[2]))));\n    end for;\n    Append(~structure_constants,row);\n  end for;\n  // the algebra for g2\n  A := Algebra<field,28| structure_constants>;\n  //This is the counit, it is essentially the trace form on the symmetric operators of octonions\n  function counit(a);\n    test := Eltseq(a);\n    return 2*(test[1]+test[8]+test[14]+test[19]+test[23]+test[26] +test[28])/7;\n  end function;\n  //function that converts pair of pure octonions to element of algebra\n  function OctoniontoA(a,b);\n    try\n      return W! sym(a,b);\n    catch e\n      error \"Error, make sure input is pair of pure octonions from the octonion algebra of definition.\";\n  end function;\n  //sanity check\n  assert counit(One(A)) eq 1;\n  return A,counit;\nend function;\n\n\n"},{"kind":2,"language":"magma","value":"\n//making indices that represent a basis of the exterior square of A\nextindexing := [];\nfor i in [1..Dimension(A)] do\n  for j in [i+1..Dimension(A)] do\n    Append(~extindexing,[i,j]);\n  end for;\nend for;\n//B is the gram matrix of norton quadratic form on the exterior square of A\nB := ZeroMatrix(field, #extindexing);\nfor i in [1..#extindexing] do\n  for j in [i..#extindexing] do\n    B[i,j] := counit((A.(extindexing[j][1])*A.(extindexing[i][1]))*(A.(extindexing[j][2])*A.(extindexing[i][2]))) -counit((A.(extindexing[j][1])*A.(extindexing[i][2]))*(A.(extindexing[j][2])*A.(extindexing[i][1])));\n    B[j,i] := B[i,j];\n  end for;\nend for;\nSignature(B);\n\n\n//compute associator of a and b, elements of algebra C\nfunction assoc(C,a,b);\n    output := [];\n    for x in Basis(C) do\n        Append(~output,Eltseq((x*a)*b-(x*b)*a));\n    end for;\n    n:= Dimension(C);\n    return Matrix(n,n,output);\nend function;\n\n\nassociator_matrix := ZeroMatrix(field,#extindexing, 28^2);\nfor i in [1..#extindexing] do\n    associator_matrix[i] := Vector(Eltseq(assoc(A,A.(extindexing[i][1]), A.(extindexing[i][2]))));\nend for;\nRank(associator_matrix);"},{"kind":2,"language":"magma","value":"\n\n"}]