[{"kind":2,"language":"magma","value":"//function that returns the Chayet--Garibaldi algebra of type G2 \n//field : the field of definition\n//O : octonion algebra over field\nfunction CGAlgebraG2(field,O);\n  //malcev product on O\n  function malcev(a,b);\n    return a*b-b*a;\n  end function;\n  //bilinear form on O, using eq 1.8 from SpringerVeldkamp\n  function norm(a,b);\n    dummy := -a*b - b*a +2*Eltseq(a)[1]*b + 2*Eltseq(a)[1]*b; \n    for i in [2..8] do\n      assert dummy[i] eq 0;\n    end for;\n    return dummy[1];\n  end function;\n  //straightforward map.\n  function sym(a,b);\n    return 1/2*(KroneckerProduct(a,b) + KroneckerProduct(b,a));\n  end function;\n  // V is the endomorphism space of operators\n  V := VectorSpace(field,8^2);\n  //This indexing represents a basis of the symmetric square of pure octonions\n  indexing := [];\n  for i in [2..8] do\n    for j in [i..8] do\n      Append(~indexing,[i,j]);\n    end for;\n  end for;\n  //construct a basis for the symmetric operators on the 7-dimensional space of pure octonions\n  basis:=[];\n  for index in indexing do\n    Append(~basis, V ! sym(O.(index[1]),O.(index[2])));\n  end for;\n  W:= RSpaceWithBasis(basis);\n  assert W.1 eq sym(O.2,O.2);\n  assert Dimension(W) eq 28;\n  //Multiplication from [D23], might be adapted to check whether any G2-equivariant product on this space admits a Killing metrized form with \"positive curvature operator\"\n  function mult(a,b,c,d);\n    term1 := norm(a,b)*sym(c,d) + norm(c,d)*sym(a,b);\n    term2 :=  norm(a,c)*sym(b,d) + norm(b,d)*sym(a,c) +norm(a,d)*sym(b,c) + norm(b,c)*sym(a,d);\n    term3 := sym(malcev(a,c),malcev(b,d)) + sym(malcev(a,d),malcev(b,c));\n    return 1/12*term1 + 1/12*term2 -1/48*term3;\n  end function;\n  // compute structure_constants\n  structure_constants := [];\n  for index1 in indexing do\n    row := [];\n    for index2 in indexing do\n      Append(~row, Coordinates(W, W ! mult(O.(index1[1]), O.(index1[2]), O.(index2[1]), O.(index2[2]))));\n    end for;\n    Append(~structure_constants,row);\n  end for;\n  // the algebra for g2\n  A := Algebra<field,28| structure_constants>;\n  //This is the counit, it is essentially the trace form on the symmetric operators of octonions\n  function counit(a);\n    test := Eltseq(a);\n    return (norm(O.2,O.2)*test[1]+norm(O.3,O.3)*test[8]+norm(O.4,O.4)*test[14]+norm(O.5,O.5)*test[19]+norm(O.6,O.6)*test[23]+norm(O.7,O.7)*test[26] +norm(O.8,O.8)*test[28])/7;\n  end function;\n  //function that converts pair of pure octonions to element of algebra\n  function OctoniontoA(a,b);\n    try\n      return A! Coordinates(W,W! sym(a,b));\n    catch e\n      error \"Error, make sure input is pair of pure octonions from the octonion algebra of definition.\";\n    end try;\n  end function;\n  //sanity check\n  assert counit(One(A)) eq 1;\n\n  return A,counit,OctoniontoA;\nend function;"},{"kind":2,"language":"magma","value":"//given as input an algebra C and bilinear form bilinear_form, compute the quadratic form related to the norton inequality on \\bigwedge^2 C\nfunction Norton_quad_form(C,bilinear_form);\n  field := BaseField(C);  \n  //making indices that represent a basis of the exterior square of A\n  extindexing := [];\n  for i in [1..Dimension(C)] do\n    for j in [i+1..Dimension(C)] do\n      Append(~extindexing,[i,j]);\n    end for;\n  end for;\n  //B is the gram matrix of norton quadratic form on the exterior square of A\n  B := ZeroMatrix(field, #extindexing);\n  for i in [1..#extindexing] do\n    for j in [i..#extindexing] do\n      B[i,j] := bilinear_form((C.(extindexing[j][1])*C.(extindexing[i][1])),(C.(extindexing[j][2])*C.(extindexing[i][2]))) -bilinear_form((C.(extindexing[j][1])*C.(extindexing[i][2])),(C.(extindexing[j][2])*C.(extindexing[i][1])));\n      B[j,i] := B[i,j];\n    end for;\n  end for;\n  return B;\nend function;"},{"kind":2,"language":"magma","value":"F := Rationals();\nA,co_unit := CGAlgebraG2(F,OctonionAlgebra(F,-1,-1,-1));\nfunction bil(a,b);\n  return co_unit(a*b);\nend function;\nSignature(Norton_quad_form(A,bil));"}]